/*
 * main.cpp
 *
 *  Created on: Sep 2, 2018
 *      Author: l_vis
 */

#include <vector>
#include <iostream>

#include "Eigen/Core"


using namespace Eigen;

Vector2d computePointJack(const Vector2d & t_point, const Vector2d & t_pose){

	double dx = 1 /(t_point[1] - t_pose[1]);
	double dz = (t_point[0] - t_pose[0]) * dx * dx;

	return Vector2d(-dx,dz);
}

Vector2d computePoseJack(const Vector2d & t_point, const Vector2d & t_pose){

	double dx = 1 /(t_point[1] - t_pose[1]);
	double dz = (t_point[0] - t_pose[0]) * dx * dx;

	return Vector2d(dx,-dz);;
}

MatrixXd computeJack(const std::vector<Vector2d> t_points, const std::vector<Vector2d> t_poses){

	int nP = t_points.size();
	int mT = t_poses.size();

	MatrixXd jack(2*(nP+mT),nP*mT);

	for(int j = 0; j < mT ; ++j){
		for(int i = 0; i < nP ; ++i){

			jack.block(2*j,nP*j+i,2,1) = computePoseJack(t_points[i],t_poses[j]);

			jack.block(2*mT*2*i,nP*j+i,2,1) = computePoseJack(t_points[i],t_poses[j]);
		}
	}
	return jack;
}

int main(int argc, char **argv) {

	int nP = atoi(argv[1]);
	int mT = atoi(argv[2]);

	std::vector<Vector2d> points, poses;

	for (int i = 0; i < nP; ++i) {
		points.push_back(Vector2d::Random());
	}

	for (int j = 0; j < mT; ++j) {
		poses.push_back(Vector2d::Random());
	}

	std::cout << computePoseJack(points[0],poses[0]);//computeJack(points,poses);
}



