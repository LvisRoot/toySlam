/*
 * main.cpp
 *
 *  Created on: Sep 2, 2018
 *      Author: l_vis
 */

#include <vector>
#include <iostream>

#include "Eigen/Dense"


const static double E_TOL = 0;
const static int N_IT_MAX = 100;

const static double CAM_FX = 1;
const static int CAM_CX = 0;


using namespace Eigen;

struct frame{
	Vector2d _pose;
	std::vector<double> _meas;
};

typedef struct frame frame;


Vector2d computePointJack(const Vector2d & t_point, const Vector2d & t_pose){

	double dx = 1 /(t_point[1] - t_pose[1]);
	double dz = CAM_FX * (t_point[0] - t_pose[0]) * dx * dx;

	dx *= CAM_FX;

	return Vector2d(-dx,dz);
}

Vector2d computePoseJack(const Vector2d & t_point, const Vector2d & t_pose){

	double dx = 1 /(t_point[1] - t_pose[1]);
	double dz = CAM_FX * (t_point[0] - t_pose[0]) * dx * dx;

	dx *= CAM_FX;

	return Vector2d(dx,-dz);;
}

MatrixXd computeJack(const std::vector<Vector2d> & t_points, const std::vector<frame> & t_frames){

	int nP = t_points.size();
	int mT = t_frames.size();

	MatrixXd jack(nP*mT,2*(nP+mT));

	for(int j = 0; j < mT ; ++j){
		for(int i = 0; i < nP ; ++i){

			jack.block(nP*j+i,2*j,1,2) = computePoseJack(t_points[i],t_frames[j]._pose).transpose();

			jack.block(nP*j+i,2*mT+2*i,1,2) = computePointJack(t_points[i],t_frames[j]._pose).transpose();
		}
	}
	return jack;
}

MatrixXd computeJack(const VectorXd & t_state, const int t_nP, const int t_mT){

	MatrixXd jack(t_nP*t_mT,2*(t_nP+t_mT));

	for(int j = 0; j < t_mT ; ++j){
		for(int i = 0; i < t_nP ; ++i){

			jack.block(t_nP*j+i,2*j,1,2) = computePoseJack(t_state.segment(2*(t_mT+i),2),t_state.segment(2*j,2)).transpose();

			jack.block(t_nP*j+i,2*t_mT+2*i,1,2) = computePointJack(t_state.segment(2*(t_mT+i),2),t_state.segment(2*j,2)).transpose();
		}
	}
	return jack;
}

double project(const Vector2d & t_p, const Vector2d & t_t){
	return CAM_FX * (t_p[0] - t_t[0]) / (t_p[1] - t_t[1]) + CAM_CX;
}

double computeErep(const double & t_q, const Vector2d & t_p, const Vector2d & t_t){

	return t_q - project(t_p,t_t);
}

VectorXd computeF(const std::vector<Vector2d> & t_points, const std::vector<frame> & t_frames){

	int nP = t_points.size();
	int mT = t_frames.size();

	VectorXd eRep(nP*mT);

	for(int j = 0; j < mT ; ++j){
		for(int i = 0; i < nP ; ++i){

			eRep[nP*j+i] = computeErep(t_frames[j]._meas[i],t_points[i],t_frames[j]._pose);
		}
	}
	return eRep;
}

VectorXd computeF(const VectorXd & t_meas, const VectorXd & t_state, const int t_nP, const int t_mT){

	VectorXd eRep(t_nP*t_mT);

	for(int j = 0; j < t_mT ; ++j){
		for(int i = 0; i < t_nP ; ++i){

			eRep[t_nP*j+i] = computeErep(t_meas[t_nP*j+i],t_state.segment(2*(t_mT+i),2),t_state.segment(2*j,2));
		}
	}
	return eRep;
}

double gnOpt(std::vector<Vector2d> & t_points, std::vector<frame> & t_frames, int t_nIt = N_IT_MAX){

	int nP = t_points.size();
	int mT = t_frames.size();

	double l_LM = 1e-8;

	if(t_nIt > N_IT_MAX)
		t_nIt = N_IT_MAX;

	VectorXd state (2*(nP+mT));
	VectorXd meas (nP*mT);


	for (int j = 0; j < mT; ++j) {
		state.segment(2*j,2) = t_frames[j]._pose;
	}

	for (int i = 2*mT; i < nP+mT; ++i) {
		state.segment(2*i,2) = t_points[i];
	}

	for(int j = 0; j < mT ; ++j){
		for(int i = 0; i < nP ; ++i){

			meas[nP*j+i] = t_frames[j]._meas[i];
		}
	}

	//VectorXd fErrOld(nP*mT);

	for (int i = 0; i < t_nIt; ++i) {

		VectorXd fErr = computeF(meas,state,nP,mT);
		MatrixXd jack = computeJack(state,nP,mT);
		MatrixXd hess = jack.transpose()*jack;

		state += (hess + l_LM * MatrixXd::Identity(jack.cols(),jack.cols())).inverse() * (-jack.transpose()*fErr);

		std::cout << "\n Opt it " << i << " repError vector: \n" << fErr.norm();
	}

	return 0;
}

int main(int argc, char **argv) {

	int nP = atoi(argv[1]);
	int mT = atoi(argv[2]);

	std::vector<Vector2d> points;
	std::vector<frame> frames;

	for (int i = 0; i < nP; ++i) {
		points.push_back(Vector2d::Random());
	}

	for (int j = 0; j < mT; ++j) {

		Vector2d pose = Vector2d::Random();
		std::vector<double> meas;

		for (int i = 0; i < nP; ++i)
			meas.push_back(project(points[i],pose));

		frames.push_back(frame{pose,meas});
	}

	//MatrixXd jack = computeJack(points,frames);

	//std::cout << "Jacobian Mat: \n" << jack << '\n';//computePoseJack(points[0],poses[0]);
	//std::cout << "JacobianT Mat: \n" << jack.transpose() << '\n';//computePoseJack(points[0],poses[0]);

	//std::cout << "\nHessian Mat: \n" << jack.transpose() * jack << '\n';

	//Map<Matrix<double,2*points.size(),1>> state (points[0].data(),2);

//	for (int i = 0; i < points.size(); ++i) {
//		std::cout << points[i] << '\n';
//	}
//
//	Map<MatrixXd> state (points[0].data(),points.size()*2,1);
//
//	std::cout << "\n Mapped Points: \n" << state << '\n';

	gnOpt(points,frames,100);

}



